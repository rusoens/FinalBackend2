

<div class="products-container">
  <h1>Nuestros Productos</h1>
    
  <div class="product-grid">
    {{#each products}}
    <div class="product-card">
      <img src="{{this.img}}" alt="{{this.title}}" class="product-image">
      <div class="product-info">
        <h3 class="product-title">{{this.title}}</h3>
        <p class="product-category">{{this.category}}</p>
        <p class="product-stock">Stock: {{this.stock}}</p>
        <p class="product-price">${{this.price}}</p>
        <div class="product-buttons">
          <a href="/products/{{this._id}}" class="btn btn-secondary">Ver más</a>
          {{#if (gt this.stock 0)}}
          <button class="btn btn-primary add-to-cart" data-id="{{this._id}}">
            <i class="fas fa-shopping-cart"></i> Añadir al carrito
          </button>
          {{else}}
          <button class="btn btn-out-of-stock" disabled>
            Agotado
          </button>
          {{/if}}
        </div>
      </div>
      {{#if (eq this.stock 0)}}
      <div class="out-of-stock-overlay">
        Out of Stock
      </div>
      {{/if}}
    </div>
    {{/each}}
  </div>

  <div class="pagination">
    {{#if pagination.hasPrevPage}}
    <a href="?page={{pagination.prevPage}}&limit={{pagination.limit}}&sort={{currentSort}}&category={{currentCategory}}"
      class="btn btn-pagination">
      <i class="fas fa-chevron-left"></i> Anterior
    </a>
    {{/if}}

    {{#each pagination.pages}}
    <a href="?page={{this}}&limit={{../pagination.limit}}&sort={{../currentSort}}&category={{../currentCategory}}"
      class="btn btn-pagination {{#if (eq this ../pagination.page)}}active{{/if}}">{{this}}</a>
    {{/each}}

    {{#if pagination.hasNextPage}}
    <a href="?page={{pagination.nextPage}}&limit={{pagination.limit}}&sort={{currentSort}}&category={{currentCategory}}"
      class="btn btn-pagination">
      Siguiente <i class="fas fa-chevron-right"></i>
    </a>
    {{/if}}
  </div>

<script>
        document.addEventListener('DOMContentLoaded', function() {
        async function addToCart(productId) {
            try {
                const response = await fetch('/api/carts/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId, quantity: 1 }),
                });
                
                if (response.ok) {
                    await rockAlert.success('¡Producto añadido al carrito!');
                    await updateCartCount(); // Actualizar el conteo del carrito
                    if (typeof checkAuth === 'function') {
                        checkAuth();
                    }
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Error al añadir al carrito');
                }
            } catch (error) {
                console.error('Error:', error);
                await rockAlert.error(error.message);
            }
        }

        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', function() {
                const productId = this.getAttribute('data-id');
                addToCart(productId);
            });
        });

        document.querySelectorAll('.product-card').forEach(card => {
            const stockElement = card.querySelector('.product-stock');
            const addToCartButton = card.querySelector('.add-to-cart');
            if (stockElement && addToCartButton) {
                const stock = parseInt(stockElement.textContent.split(':')[1]);
                if (stock === 0) {
                    addToCartButton.classList.add('btn-out-of-stock');
                    addToCartButton.disabled = true;
                    addToCartButton.textContent = 'Agotado';
                }
            }
        });
    });
</script>